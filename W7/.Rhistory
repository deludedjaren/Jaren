library(shiny)
install.packages(shiny)
install.packages("shiny")
library(shiny)
runExample(shiny)
runExample("shiny")
runexample("01_hello")
runExample("01_hello")
runApp("App")
setwd("~/Desktop/NM2207/W8/App")
setwd("~/Desktop/NM2207/W8\")
setwd("~/Desktop/NM2207/W8")
runApp("App")
runApp("App")
> runExample("02_text")
runExample("02_text")
runExample("11_timer")
runExample("02_text")
runExample("11_timer")
runApp("App2")
runApp("App2")
runApp('App2/app.R')
runApp('App2')
timer_is_running(FALSE)
runApp('App2')
runApp('App2')
runApp("App2")
runApp("App2")
runExample("11_timer")
> runExample("11_timer")
runExample("11_timer")
library(shiny)
# Define UI for displaying current time ----
ui <- fluidPage(
h2(textOutput("currentTime"))
)
# Define server logic to show current time, update every second ----
server <- function(input, output, session) {
output$currentTime <- renderText({
invalidateLater(1000, session)
paste("The current time is", Sys.time())
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp("App2")
> runApp("App2")
runApp("App2")
runApp('App2')
runApp('App2')
runApp('App2')
runApp('App2')
runExample("11_timer")
runApp('App2')
runApp('App2')
runApp('App2')
runApp('App2')
runApp('App2')
runApp("App2")
runApp("App2")
runApp('App2')
---
# Context
I used example 11 in the Shiny app.
![Screenshot](/Users/jaren/Desktop/Screenshot 2023-10-11 at 7.43.01 PM.png)
(/Users/jaren/Desktop/Screenshot 2023-10-11 at 7.43.01 PM.png)
(/Users/jaren/Desktop/Screenshot 2023-10-11 at 7.43.01 PM.png)
runApp('App2')
library(tidyverse)
library(tidyverse)
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583)
tidydata
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata
nontidydata
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement"
,
values_to = "value"
)
newtidieddata
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement"
,
values_to = "value"
)
newtidieddata
library(tidyverse)
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583)
tidydata
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata
nontidydata
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
nontidydata
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement"
,
values_to = "value"
)
newtidieddata
df <- tribble(
~id, ~bp1, ~bp2,
"A", 100, 120,
"B", 140, 115,
"C", 120, 125
)
df
df %>%
pivot_longer(
cols = bp1:bp2,
names_to = "measurement",
values_to = "value"
)
newtidieddata
newtidieddata %>%
pivot_wider(names_from="measurement",
values_from="value")
billboard
# Load the tidyverse package
library(tidyverse)
# Load the billboard dataset
data("billboard")
# Pivot the dataset to make it tidy
billboard_tidy <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
# Create a line plot
ggplot(billboard_tidy, aes(x = week, y = rank)) +
geom_line() +
labs(title = "Billboard Chart Rankings Over Weeks", x = "Week", y = "Rank")
# Load the tidyverse package
library(tidyverse)
# Assuming you have the cms_patient_experience dataset available
# If not, you need to load the dataset first
# Pivot the dataset using pivot_wider
cms_patient_experience_wide <- cms_patient_experience %>%
pivot_wider(
names_from = measure_cd,
values_from = prf_rate,
id_cols = starts_with("org")
)
# Print the resulting dataset
print(cms_patient_experience_wide)
library(dplyr)
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata
newtidieddata <- tidieddata %>%
pivot_longer(
cols = cases:population,
names_to = "measurement"
,
values_to = "value"
)
newtidieddata
knitr::opts_chunk$set(echo = TRUE)
# Load the tidyverse package
library(tidyverse)
# Load the billboard dataset
data("billboard")
# Pivot the dataset to make it tidy
billboard_tidy <- billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
billboard_tidy
# Create a line plot
ggplot(billboard_tidy, aes(x = week, y = rank)) +
geom_line() +
labs(title = "Billboard Chart Rankings Over Weeks", x = "Week", y = "Rank")
# Load the tidyverse package if not already loaded
library(tidyverse)
# Assuming you have the "billboard" dataset, you can pivot and clean the data as follows:
# Pivot the data
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
# Plot the data
ggplot(billboard_long, aes(x = week, y = rank, group = song, color = song)) +
geom_line() +
labs(title = "Billboard Song Ranks Over Weeks",
x = "Week",
y = "Rank") +
theme_minimal()
# Load the tidyverse package
library(tidyverse)
# Load the billboard dataset
data("billboard")
# Pivot the dataset to make it tidy
billboard_tidy <- billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
billboard_tidy
# Create a line plot
ggplot(billboard_tidy, aes(x = week, y = rank)) +
geom_line() +
labs(title = "Billboard Chart Rankings Over Weeks", x = "Week", y = "Rank")
# Load the tidyverse package
library(tidyverse)
# Load the Billboard dataset
data("billboard")
# Pivot the data
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE)
# Clean the data
billboard_long <- billboard_long %>%
mutate(week = parse_number(week))
# Create a line plot
ggplot(billboard_long, aes(x = week, y = rank, group = track)) +
geom_line() +
labs(x = "Week", y = "Rank") +
theme_minimal()
